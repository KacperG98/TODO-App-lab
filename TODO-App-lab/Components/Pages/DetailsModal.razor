@inject ITodoItemRepository _repository;
@inject CalendarService _calendarService;

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <div class="container">
                    <div class="row align-items-start">
                        <div class="col">
                            <h5 class="modal-title">@Item.Title</h5>
                        </div>
                        <button type="button" class="col btn btn-danger" @onclick="async () => await Delete()">
                            <i class="bi bi-trash3"></i>
                        </button>
                    </div>
                </div>
                <hr />
                <div class="container">
                    <div class="row align-items-start">
                        <p>
                            <div class="col">
                                @((Item.EndTime.HasValue) ? "Data od:" : "Data:")
                            </div>
                            <div class="col">
                                @Item.StartTime.ToString("dd.MM.yyyy HH:mm")
                            </div>
                        </p>
                        @if (Item.EndTime.HasValue)
                        {
                            <p>
                                <div class="col">
                                    Data do:
                                </div>
                                <div class="col">
                                    @Item.EndTime?.ToString("dd.MM.yyyy HH:mm")
                                </div>
                            </p>
                        }
                    </div>
                </div>
                <hr />
                @if (!string.IsNullOrEmpty(Item.Description))
                {
                    <p>@Item.Description</p>
                    <hr />
                }
                <div class="row align-items-start">
                    <button type="button" class="col btn btn-secondary" style="height: 60px; margin:1px" data-dismiss="modal" @onclick="Close">Zamknij</button>
                    <button type="button" class="col btn btn-secondary" style="height: 60px; margin:1px" data-dismiss="modal" @onclick="() => _calendarService.GenerateICalClicked(Item.Title, Item.StartTime, Item.EndTime)">Exportuj do kalendarza</button>
                </div>
            </div>
        </div>
    </div>
</div>
@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public TodoItem Item { get; set; }

    [Parameter]
    public EventCallback<TodoItem> OnDeleteAction { get; set; }

    public string ModalDisplay { get; set; } = "none;";
    public string ModalClass { get; set; } = "";
    public bool ShowBackdrop { get; set; } = false;

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public async Task Delete()
    {
        _repository.Delete(Item);
        await OnDeleteAction.InvokeAsync(Item);
        Close();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
}
